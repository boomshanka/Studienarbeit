   1               		.file	"time_of_flight.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	tof_init
  12               	tof_init:
  13               	.LFB8:
  14               		.file 1 "time_of_flight.c"
   1:time_of_flight.c **** #include "time_of_flight.h"
   2:time_of_flight.c **** #include "signal.h"
   3:time_of_flight.c **** #include "signal_interrupt.h"
   4:time_of_flight.c **** 
   5:time_of_flight.c **** #include <avr/io.h>
   6:time_of_flight.c **** #include <util/delay.h>
   7:time_of_flight.c **** 
   8:time_of_flight.c **** 
   9:time_of_flight.c **** void tof_init()
  10:time_of_flight.c **** {
  15               		.loc 1 10 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  11:time_of_flight.c **** 	// Timer initialisieren (Vorteiler 8)
  12:time_of_flight.c **** 	//TCCR0 = (1<<CS02)|(1<<CS00);
  13:time_of_flight.c **** 	TCCR0 = (1<<CS01);
  21               		.loc 1 13 0
  22 0000 82E0      		ldi r24,lo8(2)
  23 0002 83BF      		out 0x33,r24
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE8:
  28               	.global	tof_measure
  30               	tof_measure:
  31               	.LFB9:
  14:time_of_flight.c **** }
  15:time_of_flight.c **** 
  16:time_of_flight.c **** 
  17:time_of_flight.c **** 
  18:time_of_flight.c **** uint16_t tof_measure()
  19:time_of_flight.c **** {
  32               		.loc 1 19 0
  33               		.cfi_startproc
  34 0006 CF93      		push r28
  35               	.LCFI0:
  36               		.cfi_def_cfa_offset 3
  37               		.cfi_offset 28, -2
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 1 */
  41               	.L__stack_usage = 1
  20:time_of_flight.c **** 	// Flag auf 0
  21:time_of_flight.c **** 	flag = 0;
  42               		.loc 1 21 0
  43 0008 1092 0000 		sts flag,__zero_reg__
  22:time_of_flight.c **** 	
  23:time_of_flight.c **** 	
  24:time_of_flight.c **** 	// Timer starten
  25:time_of_flight.c **** 	TCNT0 = 0;
  44               		.loc 1 25 0
  45 000c 12BE      		out 0x32,__zero_reg__
  26:time_of_flight.c **** 	
  27:time_of_flight.c **** 	// Overflow auf 0
  28:time_of_flight.c **** 	of = 0;
  46               		.loc 1 28 0
  47 000e 1092 0000 		sts of+1,__zero_reg__
  48 0012 1092 0000 		sts of,__zero_reg__
  49               	.LBB12:
  50               	.LBB13:
  51               		.file 2 "signal.h"
   1:signal.h      **** #ifndef SIGNAL_H
   2:signal.h      **** #define SIGNAL_H
   3:signal.h      **** 
   4:signal.h      **** #include <stdint.h>
   5:signal.h      **** 
   6:signal.h      **** #include <avr/io.h>
   7:signal.h      **** 
   8:signal.h      **** 
   9:signal.h      **** 
  10:signal.h      **** void signal_init(void);
  11:signal.h      **** 
  12:signal.h      **** inline void signal_start(void)
  13:signal.h      **** {
  14:signal.h      **** 	// Pin PB2 als Ausgang konfigurieren
  15:signal.h      **** 	//DDRB |= (1<<PB2);
  16:signal.h      **** 	
  17:signal.h      **** 	// Timer mit CPU-Frequenz starten
  18:signal.h      **** 	TCCR1B |= (1<<CS10);
  52               		.loc 2 18 0
  53 0016 8EB5      		in r24,0x2e
  54 0018 8160      		ori r24,lo8(1)
  55 001a 8EBD      		out 0x2e,r24
  56               	.LVL0:
  57               	.LBE13:
  58               	.LBE12:
  59               	.LBB14:
  60               	.LBB15:
  61               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/avr/include/util/delay.h **** 
 155:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/avr/include/util/delay.h **** 
 158:/usr/avr/include/util/delay.h **** 	#else
 159:/usr/avr/include/util/delay.h **** 		//round up by default
 160:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/avr/include/util/delay.h **** 	#endif
 162:/usr/avr/include/util/delay.h **** 
 163:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/avr/include/util/delay.h **** 
 165:/usr/avr/include/util/delay.h **** #else
 166:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/avr/include/util/delay.h **** 	{
 172:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/avr/include/util/delay.h **** 		{
 176:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/avr/include/util/delay.h **** 		}
 180:/usr/avr/include/util/delay.h **** 		return;
 181:/usr/avr/include/util/delay.h **** 	}
 182:/usr/avr/include/util/delay.h **** 	else
 183:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/avr/include/util/delay.h **** #endif
 186:/usr/avr/include/util/delay.h **** }
 187:/usr/avr/include/util/delay.h **** 
 188:/usr/avr/include/util/delay.h **** /**
 189:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/avr/include/util/delay.h **** 
 191:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/avr/include/util/delay.h **** 
 193:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/avr/include/util/delay.h **** 
 196:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/avr/include/util/delay.h **** 
 198:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/avr/include/util/delay.h **** 
 202:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/avr/include/util/delay.h ****   
 207:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/avr/include/util/delay.h **** 
 211:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/avr/include/util/delay.h ****  
 214:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****  */
 223:/usr/avr/include/util/delay.h **** void
 224:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/avr/include/util/delay.h **** {
 226:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/avr/include/util/delay.h **** 
 234:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/avr/include/util/delay.h **** 
 237:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/avr/include/util/delay.h **** 
 240:/usr/avr/include/util/delay.h **** 	#else
 241:/usr/avr/include/util/delay.h **** 		//round up by default
 242:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/avr/include/util/delay.h **** 	#endif
 244:/usr/avr/include/util/delay.h **** 
 245:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  62               		.loc 3 245 0
  63 001c 89EF      		ldi r24,lo8(249)
  64 001e 90E0      		ldi r25,hi8(249)
  65 0020 0197      		1: sbiw r24,1
  66 0022 01F4      		brne 1b
  67 0024 00C0      		rjmp .
  68 0026 0000      		nop
  69               	.LBE15:
  70               	.LBE14:
  71               	.LBB16:
  72               	.LBB17:
  19:signal.h      **** }
  20:signal.h      **** 
  21:signal.h      **** inline void signal_stop(void)
  22:signal.h      **** {
  23:signal.h      **** 	// Timer anhalten
  24:signal.h      **** 	TCCR1B &= ~(1<<CS10);
  73               		.loc 2 24 0
  74 0028 8EB5      		in r24,0x2e
  75 002a 8E7F      		andi r24,lo8(-2)
  76 002c 8EBD      		out 0x2e,r24
  25:signal.h      **** 	
  26:signal.h      **** 	// Zähler zurücksetzen
  27:signal.h      **** 	TCNT1 = 0;
  77               		.loc 2 27 0
  78 002e 1DBC      		out 0x2c+1,__zero_reg__
  79 0030 1CBC      		out 0x2c,__zero_reg__
  80               	.LVL1:
  81               	.LBE17:
  82               	.LBE16:
  83               	.LBB18:
  84               	.LBB19:
 163:/usr/avr/include/util/delay.h **** 
  85               		.loc 3 163 0
  86 0032 8FE3      		ldi r24,lo8(1599)
  87 0034 96E0      		ldi r25,hi8(1599)
  88 0036 0197      		1: sbiw r24,1
  89 0038 01F4      		brne 1b
  90 003a 00C0      		rjmp .
  91 003c 0000      		nop
  92               	.LBE19:
  93               	.LBE18:
  29:time_of_flight.c **** 	
  30:time_of_flight.c **** 	// Signal starten
  31:time_of_flight.c **** 	signal_start();
  32:time_of_flight.c **** 	
  33:time_of_flight.c **** 	// 5 Zyklen warten
  34:time_of_flight.c **** 	_delay_us(125);
  35:time_of_flight.c **** 	
  36:time_of_flight.c **** 	// Signal stoppen
  37:time_of_flight.c **** 	signal_stop();
  38:time_of_flight.c **** 	
  39:time_of_flight.c **** 	// 5 Zyklen warten
  40:time_of_flight.c **** 	_delay_ms(0.8);
  41:time_of_flight.c **** 	
  42:time_of_flight.c **** 	// Interrupts aktivieren
  43:time_of_flight.c **** 	signal_interrupt_activate();
  94               		.loc 1 43 0
  95 003e 00D0      		rcall signal_interrupt_activate
  96               	.LVL2:
  44:time_of_flight.c **** 	
  45:time_of_flight.c **** 	// Auf Signal warten
  46:time_of_flight.c **** 	uint8_t time = 0;
  97               		.loc 1 46 0
  98 0040 C0E0      		ldi r28,0
  99               	.LVL3:
 100               	.L3:
  47:time_of_flight.c **** 	while (!flag && time != 255)
 101               		.loc 1 47 0
 102 0042 8091 0000 		lds r24,flag
 103 0046 8111      		cpse r24,__zero_reg__
 104 0048 00C0      		rjmp .L4
 105               		.loc 1 47 0 is_stmt 0 discriminator 1
 106 004a CF3F      		cpi r28,lo8(-1)
 107 004c 01F0      		breq .L4
 108               	.LVL4:
 109               	.LBB20:
 110               	.LBB21:
 163:/usr/avr/include/util/delay.h **** 
 111               		.loc 3 163 0 is_stmt 1
 112 004e 8FEC      		ldi r24,lo8(1999)
 113 0050 97E0      		ldi r25,hi8(1999)
 114 0052 0197      		1: sbiw r24,1
 115 0054 01F4      		brne 1b
 116 0056 00C0      		rjmp .
 117 0058 0000      		nop
 118               	.LBE21:
 119               	.LBE20:
  48:time_of_flight.c **** 	{
  49:time_of_flight.c **** 		_delay_ms(1);
  50:time_of_flight.c **** 		++ time;
 120               		.loc 1 50 0
 121 005a CF5F      		subi r28,lo8(-(1))
 122               	.LVL5:
 123 005c 00C0      		rjmp .L3
 124               	.LVL6:
 125               	.L4:
  51:time_of_flight.c **** 	}
  52:time_of_flight.c **** 	
  53:time_of_flight.c **** 	// Interrupts deaktivieren
  54:time_of_flight.c **** 	signal_interrupt_deactivate();
 126               		.loc 1 54 0
 127 005e 00D0      		rcall signal_interrupt_deactivate
 128               	.LVL7:
  55:time_of_flight.c **** 	
  56:time_of_flight.c **** 	// Wert zurück
  57:time_of_flight.c **** 	if (time == 255)
 129               		.loc 1 57 0
 130 0060 CF3F      		cpi r28,lo8(-1)
 131 0062 01F0      		breq .L7
  58:time_of_flight.c **** 		return 0;
  59:time_of_flight.c **** 		
  60:time_of_flight.c **** 	return overflow*(uint16_t)(255) + (uint16_t)(counterreg);
 132               		.loc 1 60 0
 133 0064 4091 0000 		lds r20,overflow
 134 0068 5091 0000 		lds r21,overflow+1
 135 006c 2091 0000 		lds r18,counterreg
 136 0070 3FEF      		ldi r19,lo8(-1)
 137 0072 349F      		mul r19,r20
 138 0074 C001      		movw r24,r0
 139 0076 359F      		mul r19,r21
 140 0078 900D      		add r25,r0
 141 007a 1124      		clr __zero_reg__
 142 007c 820F      		add r24,r18
 143 007e 911D      		adc r25,__zero_reg__
 144 0080 00C0      		rjmp .L6
 145               	.L7:
  58:time_of_flight.c **** 		return 0;
 146               		.loc 1 58 0
 147 0082 80E0      		ldi r24,0
 148 0084 90E0      		ldi r25,0
 149               	.L6:
 150               	/* epilogue start */
  61:time_of_flight.c **** 	//return overflow;
  62:time_of_flight.c **** }
 151               		.loc 1 62 0
 152 0086 CF91      		pop r28
 153               	.LVL8:
 154 0088 0895      		ret
 155               		.cfi_endproc
 156               	.LFE9:
 158               		.comm	of,2,1
 159               		.comm	overflow,2,1
 160               		.comm	counterreg,1,1
 161               		.comm	flag,1,1
 162               	.Letext0:
 163               		.file 4 "/usr/avr/include/stdint.h"
 164               		.file 5 "signal_interrupt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 time_of_flight.c
     /tmp/cclwsy02.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclwsy02.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclwsy02.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclwsy02.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclwsy02.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclwsy02.s:12     .text:0000000000000000 tof_init
     /tmp/cclwsy02.s:30     .text:0000000000000006 tof_measure
                            *COM*:0000000000000001 flag
                            *COM*:0000000000000002 of
                            *COM*:0000000000000002 overflow
                            *COM*:0000000000000001 counterreg

UNDEFINED SYMBOLS
signal_interrupt_activate
signal_interrupt_deactivate
__do_clear_bss
