
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000026c  2**0
                  ALLOC
  3 .comment      00000027  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bfd  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000868  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bf  00000000  00000000  00001fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	45 c0       	rjmp	.+138    	; 0x8e <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	59 c0       	rjmp	.+178    	; 0xc6 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	c5 d0       	rcall	.+394    	; 0x1ce <main>
  44:	c7 c0       	rjmp	.+398    	; 0x1d4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <init>:
}


void init()
{
	leds_init();
  48:	74 d0       	rcall	.+232    	; 0x132 <leds_init>
	signal_init();
  4a:	02 d0       	rcall	.+4      	; 0x50 <signal_init>
	signal_interrupt_init();
  4c:	0f d0       	rcall	.+30     	; 0x6c <signal_interrupt_init>
	tof_init();
  4e:	7a c0       	rjmp	.+244    	; 0x144 <tof_init>

00000050 <signal_init>:
{
	// COM1A0 & COM1A1: Ausgangspin PB1 bei Vergleichswert setzen, bei Überlauf löschen
	// COM1B0 & COM1B1: Ausgangspins PB2 bei Vergleichswert setzen, bei Überlauf löschen
	// WGM11 & WGM12 & WGM13: FastPWM-Modus
//	TCCR1A = (1<<COM1A1) | (1<<COM1A0) | (1<<WGM11);
	TCCR1A = (1<<COM1B1) | (1<<WGM11);
  50:	82 e2       	ldi	r24, 0x22	; 34
  52:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = (1<<WGM12) | (1<<WGM13); // Timer wird noch nicht gestartet!
  54:	88 e1       	ldi	r24, 0x18	; 24
  56:	8e bd       	out	0x2e, r24	; 46
    
    // Vergleichswert für PB1
    //OCR1A = 100;
    // Vergleichswert für PB2
    OCR1B = 100;
  58:	84 e6       	ldi	r24, 0x64	; 100
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	99 bd       	out	0x29, r25	; 41
  5e:	88 bd       	out	0x28, r24	; 40
    
    // Überlaufwert
    ICR1 = 200;
  60:	88 ec       	ldi	r24, 0xC8	; 200
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	97 bd       	out	0x27, r25	; 39
  66:	86 bd       	out	0x26, r24	; 38
    
    // PB2 als Ausgang konfigurieren
    DDRB |= (1<<PB2);
  68:	ba 9a       	sbi	0x17, 2	; 23
  6a:	08 95       	ret

0000006c <signal_interrupt_init>:


void signal_interrupt_init()
{
	// Interrupt INT0 auf fallende Flanke
	MCUCR = (1<<ISC01);
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	85 bf       	out	0x35, r24	; 53
	
	// Überlaufinterrupt vom Zähler 0 aktivieren
	TIMSK |= (1<<TOIE0);
  70:	89 b7       	in	r24, 0x39	; 57
  72:	81 60       	ori	r24, 0x01	; 1
  74:	89 bf       	out	0x39, r24	; 57
  76:	08 95       	ret

00000078 <signal_interrupt_activate>:
}

void signal_interrupt_activate()
{
	// Bit löschen
	GIFR |= (1<<INTF0);
  78:	8a b7       	in	r24, 0x3a	; 58
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8a bf       	out	0x3a, r24	; 58
	
	// Interrupt INT0 aktivieren
	GIMSK |= (1<<INT0);
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 64       	ori	r24, 0x40	; 64
  82:	8b bf       	out	0x3b, r24	; 59
  84:	08 95       	ret

00000086 <signal_interrupt_deactivate>:


void signal_interrupt_deactivate()
{
	// Interrupt INT0 deaktivieren
	GIMSK &= ~(1<<INT0);
  86:	8b b7       	in	r24, 0x3b	; 59
  88:	8f 7b       	andi	r24, 0xBF	; 191
  8a:	8b bf       	out	0x3b, r24	; 59
  8c:	08 95       	ret

0000008e <__vector_1>:
}


// Interrupt bei empfangenen Signal
ISR(INT0_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
	counterreg = TCNT0;
  9c:	82 b7       	in	r24, 0x32	; 50
  9e:	80 93 64 00 	sts	0x0064, r24
	overflow = of;
  a2:	80 91 60 00 	lds	r24, 0x0060
  a6:	90 91 61 00 	lds	r25, 0x0061
  aa:	90 93 63 00 	sts	0x0063, r25
  ae:	80 93 62 00 	sts	0x0062, r24
	flag = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 65 00 	sts	0x0065, r24
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_9>:


// Interrupt bei Überlauf von Zähler 0
ISR (TIMER0_OVF_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	++of;
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	90 91 61 00 	lds	r25, 0x0061
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 61 00 	sts	0x0061, r25
  e2:	80 93 60 00 	sts	0x0060, r24
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <_leds_blink>:

void _leds_blink(uint8_t pin)
{
	for(uint8_t i = 0; i < 4; ++i)
	{
		LEDS_PORT ^= (1<<pin);
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <_leds_blink+0x6>
  f8:	99 0f       	add	r25, r25
  fa:	8a 95       	dec	r24
  fc:	ea f7       	brpl	.-6      	; 0xf8 <_leds_blink+0x4>
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	25 b3       	in	r18, 0x15	; 21
 102:	29 27       	eor	r18, r25
 104:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f e7       	ldi	r18, 0x7F	; 127
 108:	38 e3       	ldi	r19, 0x38	; 56
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <_leds_blink+0x18>
 114:	00 c0       	rjmp	.+0      	; 0x116 <_leds_blink+0x22>
 116:	00 00       	nop
 118:	81 50       	subi	r24, 0x01	; 1
}


void _leds_blink(uint8_t pin)
{
	for(uint8_t i = 0; i < 4; ++i)
 11a:	91 f7       	brne	.-28     	; 0x100 <_leds_blink+0xc>
	{
		LEDS_PORT ^= (1<<pin);
		_delay_ms(50);
	}
	
	LEDS_PORT |= (1<<PC1);
 11c:	a9 9a       	sbi	0x15, 1	; 21
 11e:	88 ec       	ldi	r24, 0xC8	; 200
 120:	ef e1       	ldi	r30, 0x1F	; 31
 122:	fe e4       	ldi	r31, 0x4E	; 78
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <_leds_blink+0x30>
 128:	00 c0       	rjmp	.+0      	; 0x12a <_leds_blink+0x36>
 12a:	00 00       	nop
 12c:	81 50       	subi	r24, 0x01	; 1
	for (uint8_t i = 0; i < 200; ++i) _delay_ms(10);
 12e:	c1 f7       	brne	.-16     	; 0x120 <_leds_blink+0x2c>
}
 130:	08 95       	ret

00000132 <leds_init>:


void leds_init(void)
{
	// Pins auf Ausgang stellen
	LEDS_DDR |= (1<<LEDS_RED)|(1<<LEDS_YELLOW)|(1<<LEDS_GREEN);
 132:	84 b3       	in	r24, 0x14	; 20
 134:	87 60       	ori	r24, 0x07	; 7
 136:	84 bb       	out	0x14, r24	; 20
	
	
	// Rot, Gelb, Grün blinken
	_leds_blink(LEDS_RED);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	dc df       	rcall	.-72     	; 0xf4 <_leds_blink>
	_leds_blink(LEDS_YELLOW);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	da df       	rcall	.-76     	; 0xf4 <_leds_blink>
	_leds_blink(LEDS_GREEN);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	d8 cf       	rjmp	.-80     	; 0xf4 <_leds_blink>

00000144 <tof_init>:

void tof_init()
{
	// Timer initialisieren (Vorteiler 8)
	//TCCR0 = (1<<CS02)|(1<<CS00);
	TCCR0 = (1<<CS01);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	83 bf       	out	0x33, r24	; 51
 148:	08 95       	ret

0000014a <tof_measure>:
}



uint16_t tof_measure()
{
 14a:	cf 93       	push	r28
	// Flag auf 0
	flag = 0;
 14c:	10 92 65 00 	sts	0x0065, r1
	
	
	// Timer starten
	TCNT0 = 0;
 150:	12 be       	out	0x32, r1	; 50
	
	// Overflow auf 0
	of = 0;
 152:	10 92 61 00 	sts	0x0061, r1
 156:	10 92 60 00 	sts	0x0060, r1
{
	// Pin PB2 als Ausgang konfigurieren
	//DDRB |= (1<<PB2);
	
	// Timer mit CPU-Frequenz starten
	TCCR1B |= (1<<CS10);
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	8e bd       	out	0x2e, r24	; 46
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <tof_measure+0x1a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <tof_measure+0x20>
 16a:	00 00       	nop
}

inline void signal_stop(void)
{
	// Timer anhalten
	TCCR1B &= ~(1<<CS10);
 16c:	8e b5       	in	r24, 0x2e	; 46
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	8e bd       	out	0x2e, r24	; 46
	
	// Zähler zurücksetzen
	TCNT1 = 0;
 172:	1d bc       	out	0x2d, r1	; 45
 174:	1c bc       	out	0x2c, r1	; 44
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	96 e0       	ldi	r25, 0x06	; 6
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <tof_measure+0x30>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <tof_measure+0x36>
 180:	00 00       	nop
	
	// 5 Zyklen warten
	_delay_ms(0.8);
	
	// Interrupts aktivieren
	signal_interrupt_activate();
 182:	7a df       	rcall	.-268    	; 0x78 <signal_interrupt_activate>
	
	// Auf Signal warten
	uint8_t time = 0;
 184:	c0 e0       	ldi	r28, 0x00	; 0
	while (!flag && time != 255)
 186:	80 91 65 00 	lds	r24, 0x0065
 18a:	81 11       	cpse	r24, r1
 18c:	0a c0       	rjmp	.+20     	; 0x1a2 <tof_measure+0x58>
 18e:	cf 3f       	cpi	r28, 0xFF	; 255
 190:	41 f0       	breq	.+16     	; 0x1a2 <tof_measure+0x58>
 192:	8f ec       	ldi	r24, 0xCF	; 207
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <tof_measure+0x4c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <tof_measure+0x52>
 19c:	00 00       	nop
	{
		_delay_ms(1);
		++ time;
 19e:	cf 5f       	subi	r28, 0xFF	; 255
 1a0:	f2 cf       	rjmp	.-28     	; 0x186 <tof_measure+0x3c>
	}
	
	// Interrupts deaktivieren
	signal_interrupt_deactivate();
 1a2:	71 df       	rcall	.-286    	; 0x86 <signal_interrupt_deactivate>
	
	// Wert zurück
	if (time == 255)
 1a4:	cf 3f       	cpi	r28, 0xFF	; 255
 1a6:	79 f0       	breq	.+30     	; 0x1c6 <tof_measure+0x7c>
		return 0;
		
	return overflow*(uint16_t)(255) + (uint16_t)(counterreg);
 1a8:	40 91 62 00 	lds	r20, 0x0062
 1ac:	50 91 63 00 	lds	r21, 0x0063
 1b0:	20 91 64 00 	lds	r18, 0x0064
 1b4:	3f ef       	ldi	r19, 0xFF	; 255
 1b6:	34 9f       	mul	r19, r20
 1b8:	c0 01       	movw	r24, r0
 1ba:	35 9f       	mul	r19, r21
 1bc:	90 0d       	add	r25, r0
 1be:	11 24       	eor	r1, r1
 1c0:	82 0f       	add	r24, r18
 1c2:	91 1d       	adc	r25, r1
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <tof_measure+0x80>
	// Interrupts deaktivieren
	signal_interrupt_deactivate();
	
	// Wert zurück
	if (time == 255)
		return 0;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
		
	return overflow*(uint16_t)(255) + (uint16_t)(counterreg);
	//return overflow;
}
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <main>:


int main(void)
{
	// Initialisieren
	init();
 1ce:	3c df       	rcall	.-392    	; 0x48 <init>
	
	// Interrupts aktivieren
	sei();
 1d0:	78 94       	sei
	
	
	while (1)
	{
		
	}
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x4>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
